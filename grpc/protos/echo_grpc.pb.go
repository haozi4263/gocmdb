// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoServiceClient interface {
	UnaryEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	SStreamEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (EchoService_SStreamEchoClient, error)
	CStreamEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_CStreamEchoClient, error)
	BiStreamEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_BiStreamEchoClient, error)
}

type echoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServiceClient(cc grpc.ClientConnInterface) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) UnaryEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/EchoService/UnaryEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) SStreamEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (EchoService_SStreamEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[0], "/EchoService/SStreamEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceSStreamEchoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EchoService_SStreamEchoClient interface {
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceSStreamEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceSStreamEchoClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) CStreamEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_CStreamEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[1], "/EchoService/CStreamEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceCStreamEchoClient{stream}
	return x, nil
}

type EchoService_CStreamEchoClient interface {
	Send(*EchoRequest) error
	CloseAndRecv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceCStreamEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceCStreamEchoClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceCStreamEchoClient) CloseAndRecv() (*EchoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) BiStreamEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_BiStreamEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[2], "/EchoService/BiStreamEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceBiStreamEchoClient{stream}
	return x, nil
}

type EchoService_BiStreamEchoClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type echoServiceBiStreamEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceBiStreamEchoClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceBiStreamEchoClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServiceServer is the server API for EchoService service.
// All implementations must embed UnimplementedEchoServiceServer
// for forward compatibility
type EchoServiceServer interface {
	UnaryEcho(context.Context, *EchoRequest) (*EchoResponse, error)
	SStreamEcho(*EchoRequest, EchoService_SStreamEchoServer) error
	CStreamEcho(EchoService_CStreamEchoServer) error
	BiStreamEcho(EchoService_BiStreamEchoServer) error
	mustEmbedUnimplementedEchoServiceServer()
}

// UnimplementedEchoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEchoServiceServer struct {
}

func (UnimplementedEchoServiceServer) UnaryEcho(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryEcho not implemented")
}
func (UnimplementedEchoServiceServer) SStreamEcho(*EchoRequest, EchoService_SStreamEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method SStreamEcho not implemented")
}
func (UnimplementedEchoServiceServer) CStreamEcho(EchoService_CStreamEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method CStreamEcho not implemented")
}
func (UnimplementedEchoServiceServer) BiStreamEcho(EchoService_BiStreamEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method BiStreamEcho not implemented")
}
func (UnimplementedEchoServiceServer) mustEmbedUnimplementedEchoServiceServer() {}

// UnsafeEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServiceServer will
// result in compilation errors.
type UnsafeEchoServiceServer interface {
	mustEmbedUnimplementedEchoServiceServer()
}

func RegisterEchoServiceServer(s grpc.ServiceRegistrar, srv EchoServiceServer) {
	s.RegisterService(&EchoService_ServiceDesc, srv)
}

func _EchoService_UnaryEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).UnaryEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EchoService/UnaryEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).UnaryEcho(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_SStreamEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServiceServer).SStreamEcho(m, &echoServiceSStreamEchoServer{stream})
}

type EchoService_SStreamEchoServer interface {
	Send(*EchoResponse) error
	grpc.ServerStream
}

type echoServiceSStreamEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceSStreamEchoServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EchoService_CStreamEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).CStreamEcho(&echoServiceCStreamEchoServer{stream})
}

type EchoService_CStreamEchoServer interface {
	SendAndClose(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceCStreamEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceCStreamEchoServer) SendAndClose(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceCStreamEchoServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EchoService_BiStreamEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).BiStreamEcho(&echoServiceBiStreamEchoServer{stream})
}

type EchoService_BiStreamEchoServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type echoServiceBiStreamEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceBiStreamEchoServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceBiStreamEchoServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoService_ServiceDesc is the grpc.ServiceDesc for EchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryEcho",
			Handler:    _EchoService_UnaryEcho_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SStreamEcho",
			Handler:       _EchoService_SStreamEcho_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CStreamEcho",
			Handler:       _EchoService_CStreamEcho_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BiStreamEcho",
			Handler:       _EchoService_BiStreamEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "echo.proto",
}
